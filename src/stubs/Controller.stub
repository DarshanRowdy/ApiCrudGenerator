<?php

namespace App\Http\Controllers\Api;

use App\Http\Requests\{{modelName}}Request;
use App\{{modelName}};
use DevDr\ApiCrudGenerator\Controllers\BaseApiController;

class {{modelName}}Controller extends BaseApiController
{
    public function index({{modelName}}Request $request)
    {
        $offset = isset($request->offset) ? $request->offset : config('app.default_offset');
        $limit = isset($request->limit) ? $request->limit : config('app.default_limit');
        try{
            ${{modelNamePluralLowerCase}} = {{modelName}}::latest();
            ${{modelNamePluralLowerCase}}->skip($offset);
            ${{modelNamePluralLowerCase}}->take($limit);
            $arr{{modelName}} = ${{modelNamePluralLowerCase}}->get();
        } catch (\Exception $exception){
            $this->_sendErrorResponse(500);
        }
        $p['offset'] = $offset;
        $p['limit'] = $limit;
        $p['record_sent'] = count($arr{{modelName}});
        $response = ['{{modelNamePluralLowerCase}}' => $arr{{modelName}}, 'pagination' => $p];
        $this->_sendResponse($response, '{{modelNamePluralLowerCase}} listing Success');
    }

    public function store({{modelName}}Request $request)
    {
        try{
            ${{modelNameSingularLowerCase}} = {{modelName}}::create($request->all());
        } catch (\Exception $exception){
            $this->_sendErrorResponse(500);
        }
        $response = ['{{modelNameSingularLowerCase}}' => ${{modelNameSingularLowerCase}}];
        $this->_sendResponse($response, '{{modelNameSingularLowerCase}} created success');
    }

    public function show($id)
    {
        try{
            ${{modelNameSingularLowerCase}} = {{modelName}}::findOrFail($id);
        } catch (\Exception $exception){
            $this->_sendErrorResponse(500);
        }
        $response = ['{{modelNameSingularLowerCase}}' => ${{modelNameSingularLowerCase}}];
        $this->_sendResponse($response, '{{modelNameSingularLowerCase}} found success');
    }

    public function update({{modelName}}Request $request, $id)
    {
        try{
            ${{modelNameSingularLowerCase}} = {{modelName}}::findOrFail($id);
            ${{modelNameSingularLowerCase}}->update($request->all());
        } catch (\Exception $exception){
            $this->_sendErrorResponse(500);
        }
        $response = ['{{modelNameSingularLowerCase}}' => ${{modelNameSingularLowerCase}}];
        $this->_sendResponse($response, '{{modelNameSingularLowerCase}} update success');
    }

    public function destroy($id)
    {
        try{
            ${{modelNameSingularLowerCase}} = {{modelName}}::destroy($id);
        } catch (\Exception $exception){
            $this->_sendErrorResponse(204);
        }
        $response = ['{{modelNameSingularLowerCase}}' => ${{modelNameSingularLowerCase}}];
        $this->_sendResponse($response, '{{modelNameSingularLowerCase}} delete successfully');
    }
}
